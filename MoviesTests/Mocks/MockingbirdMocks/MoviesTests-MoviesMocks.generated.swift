//
//  MoviesTests-MoviesMocks.generated.swift
//  Movies
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import Mockingbird
@testable import Movies
import Combine
import CombineMoya
import Foundation
import InjectPropertyWrapper
import Moya
import Swift
import SwiftUI
import Swinject

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked MovieServiceProtocol
public final class MovieServiceProtocolMock: MovieServiceProtocol, Mockingbird.Mock {
  typealias MockingbirdSupertype = MovieServiceProtocol
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "Movies"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    MovieServiceProtocolMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `getGenres`()
  public func `getGenres`() -> AnyPublisher<Genres, Error> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getGenres`() -> AnyPublisher<Genres, Error>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<Genres, Error>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> AnyPublisher<Genres, Error> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: AnyPublisher<Genres, Error> = mkbObject.`getGenres`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (AnyPublisher<Genres, Error>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getGenres`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<Genres, Error>, AnyPublisher<Genres, Error>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<Genres, Error>, AnyPublisher<Genres, Error>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`getGenres`() -> AnyPublisher<Genres, Error>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<Genres, Error>).self)))
  }

  // MARK: Mocked `getMovies`()
  public func `getMovies`() -> AnyPublisher<Movies, Error> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getMovies`() -> AnyPublisher<Movies, Error>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<Movies, Error>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> AnyPublisher<Movies, Error> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: AnyPublisher<Movies, Error> = mkbObject.`getMovies`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (AnyPublisher<Movies, Error>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getMovies`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<Movies, Error>, AnyPublisher<Movies, Error>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<Movies, Error>, AnyPublisher<Movies, Error>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`getMovies`() -> AnyPublisher<Movies, Error>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<Movies, Error>).self)))
  }
}

/// Returns a concrete mock of `MovieServiceProtocol`.
public func mock(_ type: MovieServiceProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> MovieServiceProtocolMock {
  return MovieServiceProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
